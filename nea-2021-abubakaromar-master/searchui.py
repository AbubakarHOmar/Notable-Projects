
# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'searchui.ui'
#
# Created by: PyQt5 UI code generator 5.15.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtGui import QIcon
import re
import sqlite3
from time import strptime
import datetime
db=sqlite3.connect("test.db")
cursor=db.cursor()
from bs4 import BeautifulSoup as bs
import requests
import os
cases=['posts','movies','batch']
headers={"User-Agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.193 Safari/537.36"}
selected_show=None

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(528, 372)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.pushButton = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton.setGeometry(QtCore.QRect(430, 10, 93, 28))
        self.pushButton.setObjectName("pushButton")
        self.pushButton.clicked.connect(self.search)
        self.pushButton_2 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_2.setGeometry(QtCore.QRect(430, 290, 93, 28))
        self.pushButton_2.setObjectName("pushButton_2")
        self.pushButton_2.clicked.connect(self.download)
        self.comboBox = QtWidgets.QComboBox(self.centralwidget)
        self.comboBox.setGeometry(QtCore.QRect(430, 50, 93, 28))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.comboBox.sizePolicy().hasHeightForWidth())
        self.comboBox.setSizePolicy(sizePolicy)
        self.comboBox.setObjectName("comboBox")
        self.comboBox.addItems(["1080p","720p","540p","480p"])
        self.layoutWidget = QtWidgets.QWidget(self.centralwidget)
        self.layoutWidget.setGeometry(QtCore.QRect(10, 10, 411, 311))
        self.layoutWidget.setObjectName("layoutWidget")
        self.comboBox.currentIndexChanged.connect(self.quality_change)
        self.widget = QtWidgets.QWidget(self.centralwidget)
        self.widget.setGeometry(QtCore.QRect(10, 10, 411, 311))
        self.widget.setObjectName("widget")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.widget)
        self.verticalLayout.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout.setObjectName("verticalLayout")
        self.lineEdit = QtWidgets.QLineEdit(self.widget)
        self.lineEdit.setObjectName("lineEdit")
        self.lineEdit.setFocus()
        self.verticalLayout.addWidget(self.lineEdit)
        self.listWidget = QtWidgets.QListWidget(self.widget)
        self.listWidget.setObjectName("listWidget")
        self.listWidget.setSelectionMode(QtWidgets.QAbstractItemView.ExtendedSelection)
        self.listWidget.doubleClicked.connect(self.display_shows)
        self.verticalLayout.addWidget(self.listWidget)
        self.label = QtWidgets.QLabel(self.layoutWidget)
        font = QtGui.QFont()
        font.setFamily("Roboto")
        font.setPointSize(12)
        font.setBold(True)
        self.label.setFont(font)
        #self.label.setText("")
        self.label.setObjectName("label")
        self.verticalLayout.addWidget(self.label)
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 528, 26))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Erai-Raws Downloader"))
        self.pushButton.setText(_translate("MainWindow", "Search"))
        self.pushButton_2.setText(_translate("MainWindow", "Download"))
        self.lineEdit.setPlaceholderText(_translate("MainWindow", "Enter anime name..."))

    def search(self):
        self.lineEdit.setFocus()
        self.label.setText("")
        self.listWidget.clear()
        search=self.lineEdit.text()
        if len(search)>0:
            regex=re.compile('(?i){}'.format(search))
            url = requests.get("https://erai-raws.info/anime-list/",headers=headers)
            if url.status_code == requests.codes.ok:
                url=url.text
                soup = bs(url, "lxml")
                animes = soup.find_all("div", class_="ind-show button button5")
                for anime in animes:
                    animetitle=anime.find("a").get("title")
                    result=regex.search(animetitle)
                    if result is not None:
                        animelink=anime.find("a").get("href")
                        self.listWidget.addItem(animetitle)
            else:
                self.label.setText("Error!\nCOME BACK LATER")
        else:
            pass

    def display_shows(self):
        self.lineEdit.setFocus()
        self.label.setText("")
        global selected_show
        selected=self.listWidget.selectedItems()
        labels = [self.listWidget.item(i).text() for i in range(self.listWidget.count())]
        if len(selected)>0:
            if "Episodes:" in labels or "Movies and Special episodes:" in labels or "Batches:" in labels:
                pass
            else:
                selected_item=selected[0].text()
                selected_show=selected_item
                self.display_showinfo()
                

    def display_showinfo(self):
        QtWidgets.QApplication.processEvents()
        self.lineEdit.setFocus()
        global selected_show
        self.listWidget.clear()
        cursor.execute("""SELECT showname, epno, quality, link
                          FROM Episodes
                          WHERE showname = ? AND quality = ?
                          ORDER BY ROWID DESC""",(selected_show,self.comboBox.currentText()))
        self.listWidget.addItem("Episodes:")
        episodes=cursor.fetchall()
        if len(episodes)>0:
            for item in episodes:
                self.listWidget.addItem(item[0] + ' - ' + str(item[1]) + ' - ' + item[2])
        else:
            self.listWidget.addItem(":/")

        cursor.execute("""SELECT showname, range, quality, link
                          FROM Batch
                          WHERE showname = ? AND quality = ?
                          ORDER BY ROWID DESC""",(selected_show,self.comboBox.currentText()))
        self.listWidget.addItem("Batches:")
        batches=cursor.fetchall()
        if len(batches)>0:
            for item in batches:
                self.listWidget.addItem(item[0] + ' - ' + str(item[1]) + ' - ' + item[2])
        else:
            self.listWidget.addItem(":/")

        cursor.execute("""SELECT showname, moviename, quality, link
                          FROM Movies
                          WHERE showname = ? AND quality = ?
                          ORDER BY ROWID DESC""",(selected_show,self.comboBox.currentText()))
        self.listWidget.addItem("Movies and Special episodes:")
        movies=cursor.fetchall()
        if len(movies)>0:
            for item in movies:
                self.listWidget.addItem(item[0] + ' - ' + str(item[1]) + ' - ' + item[2])
        else:
            self.listWidget.addItem(":/")
            
    def quality_change(self):
        self.lineEdit.setFocus()
        self.label.setText("")
        global selected_show
        labels = [self.listWidget.item(i).text() for i in range(self.listWidget.count())]
        if "Episodes:" in labels or "Movies and Special episodes:" in labels or "Batches:" in labels and selected_show is not None:
            self.listWidget.clear()
                
            cursor.execute("""SELECT showname, epno, quality, link
                          FROM Episodes
                          WHERE showname = ? AND quality = ?
                          ORDER BY ROWID DESC""",(selected_show,self.comboBox.currentText()))
            self.listWidget.addItem("Episodes:")
            
            episodes=cursor.fetchall()
            if len(episodes)>0:
                for item in episodes:
                        self.listWidget.addItem(item[0] + ' - ' + str(item[1]) + ' - ' + item[2])
            else:
                self.listWidget.addItem(":/")

            cursor.execute("""SELECT showname, range, quality, link
                              FROM Batch
                              WHERE showname = ? AND quality = ?
                              ORDER BY ROWID DESC""",(selected_show,self.comboBox.currentText()))
            self.listWidget.addItem("Batches:")
            
            batches=cursor.fetchall()
            if len(batches)>0:
                
                for item in batches:
                    self.listWidget.addItem(item[0] + ' - ' + str(item[1]) + ' - ' + item[2])
            else:
                self.listWidget.addItem(":/")

            
            cursor.execute("""SELECT showname, moviename, quality, link
                              FROM Movies
                              WHERE showname = ? AND quality = ?
                              ORDER BY ROWID DESC""",(selected_show,self.comboBox.currentText()))
            self.listWidget.addItem("Movies and Special episodes:")
            
            movies=cursor.fetchall()
            if len(movies)>0:
                
                for item in movies:
                    self.listWidget.addItem(item[0] + ' - ' + str(item[1]) + ' - ' + item[2])
            else:
                self.listWidget.addItem(":/")
        else:
            pass
            
    def download(self):
        self.label.setText("")
        labels = [self.listWidget.item(i).text() for i in range(self.listWidget.count())]
        if "Episodes:" in labels or "Movies and Special episodes:" in labels or "Batches:" in labels:
            selected=[i.text() for i in self.listWidget.selectedItems()]
            episode_index=0
            batch_index=labels.index("Batches:")
            movie_index=labels.index("Movies and Special episodes:")
            if ":/" in selected or "Episodes:" in selected or "Movies and Special episodes:" in selected or "Batches:" in selected:
                self.label.setText("Do not select any labels!")
                pass
            else:
                for item in selected:
                    if labels.index(item)>episode_index and labels.index(item)<batch_index:
                        info=item.split(' - ')
                        epno=info[-2]
                        cursor.execute("""SELECT  link FROM Episodes
                                          WHERE showname = ? AND quality = ? and epno = ?
                                          ORDER BY ROWID DESC""",(selected_show,self.comboBox.currentText(),epno))
                        for x in cursor.fetchall():
                            os.startfile(x[0])
                    elif labels.index(item)>batch_index and labels.index(item)<movie_index:
                        info=item.split(' - ')
                        batch_range=info[-2]
                        cursor.execute("""SELECT  link FROM Batch
                                          WHERE showname = ? AND quality = ? and range = ?
                                          ORDER BY ROWID DESC""",(selected_show,self.comboBox.currentText(),batch_range))
                        for x in cursor.fetchall():
                            os.startfile(x[0])
                    elif labels.index(item)>movie_index:
                        info=item.text().split(' - ')
                        moviename=info[-2]
                        cursor.execute("""SELECT  link FROM Movies
                                          WHERE showname = ? AND quality = ? and moviename = ?
                                          ORDER BY ROWID DESC""",(selected_show,self.comboBox.currentText(),moviename))
                        for x in cursor.fetchall():
                            os.startfile(x[0])
                    else:
                        pass
                    
if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
